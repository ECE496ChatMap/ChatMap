{
  "parser": "babel-eslint",

  "ecmaFeatures": {
    "jsx": true
  },

  "env": {
    "es6": true
  },

  "plugins": [
    "react"
  ],

  // Map from global var to bool specifying if it can be redefined
  "globals": {
    "__BUNDLE_START_TIME__": false,
    "__DEV__": true,
    "__dirname": false,
    "__filename": false,
    "__fbBatchedBridgeConfig": false,
    "alert": false,
    "cancelAnimationFrame": false,
    "clearImmediate": true,
    "clearInterval": false,
    "clearTimeout": false,
    "console": false,
    "document": false,
    "escape": false,
    "exports": false,
    "fetch": false,
    "global": false,
    "jest": false,
    "pit": false,
    "Map": true,
    "module": false,
    "navigator": false,
    "Parse": false,
    "process": false,
    "Promise": false,
    "requestAnimationFrame": true,
    "require": false,
    "Set": true,
    "setImmediate": true,
    "setInterval": false,
    "setTimeout": false,
    "window": false,
    "FormData": true,
    "XMLHttpRequest": false,

    // Flow "known-globals" annotations:
    "ReactElement": false,
    "ReactClass": false,
    "Class": false
  },

  "rules": {
    "comma-dangle": "error",            // disallow trailing commas in object literals
    "no-cond-assign": "error",             // disallow assignment in conditional expressions
    "no-console": 0,                 // disallow use of console (off by default in the node environment)
    "no-constant-condition": 0,      // disallow use of constant expressions in conditions
    "no-control-regex": "error",           // disallow control characters in regular expressions
    "no-debugger": "error",                // disallow use of debugger
    "no-dupe-keys": 2,               // disallow duplicate keys when creating object literals
    "no-empty": 0,                   // disallow empty statements
    "no-empty-character-class": "error",             // disallow the use of empty character classes in regular expressions
    "no-ex-assign": "error",               // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": "error",      // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 0,            // disallow unnecessary parentheses (off by default)
    "no-extra-semi": "error",              // disallow unnecessary semicolons
    "no-func-assign": 0,             // disallow overwriting functions written as function declarations
    "no-inner-declarations": 0,      // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": "error",          // disallow invalid regular expression strings in the RegExp constructor
    "no-negated-in-lhs": "error",          // disallow negation of the left operand of an in expression
    "no-obj-calls": "error",               // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": "error",            // disallow multiple spaces in a regular expression literal
    "no-reserved-keys": 0,           // disallow reserved words being used as object literal keys (off by default)
    "no-sparse-arrays": "error",           // disallow sparse arrays
    "no-unreachable": 2,             // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": "error",                  // disallow comparisons with the value NaN
    "valid-jsdoc": 0,                // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": "error",               // Ensure that the results of typeof are compared against a valid string

  // Best Practices
  // These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

    "block-scoped-var": 0,           // treat var statements as if they were block scoped (off by default)
    "complexity": 0,                 // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 0,          // require return statements to either always or never specify values
    "curly": "error",                      // specify curly brace conventions for all control statements
    "default-case": 0,               // require default case in switch statements (off by default)
    "dot-notation": 0,               // encourages use of dot notation whenever possible
    "eqeqeq": "error",                     // require the use of === and !==
    "guard-for-in": 0,               // make sure for-in loops have an if statement (off by default)
    "no-alert": 0,                   // disallow the use of alert, confirm, and prompt
    "no-caller": "error",                  // disallow use of arguments.caller or arguments.callee
    "no-div-regex": "error",               // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 0,             // disallow else after a return in an if (off by default)
    "no-eq-null": 0,                 // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": "error",                    // disallow use of eval()
    "no-extend-native": "error",           // disallow adding to native types
    "no-extra-bind": "error",              // disallow unnecessary function binding
    "no-fallthrough": "error",             // disallow fallthrough of case statements
    "no-floating-decimal": "error",        // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": "error",            // disallow use of eval()-like methods
    "no-labels": "error",                  // disallow use of labeled statements
    "no-iterator": "error",                // disallow usage of __iterator__ property
    "no-lone-blocks": "error",             // disallow unnecessary nested blocks
    "no-loop-func": 0,               // disallow creation of functions within loops
    "no-multi-str": 0,               // disallow use of multiline strings
    "no-native-reassign": 0,         // disallow reassignments of native objects
    "no-new": "error",                     // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": "error",                // disallow use of new operator for Function object
    "no-new-wrappers": "error",            // disallows creating new instances of String,Number, and Boolean
    "no-octal": "error",                   // disallow use of octal literals
    "no-octal-escape": "error",            // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \25"error"";
    "no-proto": "error",                   // disallow usage of __proto__ property
    "no-redeclare": 0,               // disallow declaring the same variable more then once
    "no-return-assign": "error",           // disallow use of assignment in return statement
    "no-script-url": "error",              // disallow use of javascript: urls.
    "no-self-compare": "error",            // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": "error",               // disallow use of comma operator
    "no-unused-expressions": 0,      // disallow usage of expressions in statement position
    "no-void": "error",                    // disallow use of void operator (off by default)
    "no-warning-comments": 0,        // disallow usage of configurable warning terms in comments": "error",                        // e.g. TODO or FIXME (off by default)
    "no-with": "error",                    // disallow use of the with statement
    "radix": "error",                      // require use of the second argument for parseInt() (off by default)
    "semi-spacing": "error",               // require a space after a semi-colon
    "vars-on-top": 0,                // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 0,                  // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": "error",                       // require or disallow Yoda conditions

  // Strict Mode
  // These rules relate to using strict mode.

    // "strict": [2, "global"],         // require or disallow the "use strict" pragma in the global scope (off by default in the node environment)

  // Variables
  // These rules have to do with variable declarations.

    "no-catch-shadow": "error",            // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": "error",              // disallow deletion of variables
    "no-label-var": "error",               // disallow labels that share a name with a variable
    "no-shadow": "error",                  // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": "error", // disallow shadowing of names such as arguments
    "no-undef": 2,                   // disallow use of undeclared variables unless mentioned in a /*global */ block.
    "no-undefined": 0,               // disallow use of undefined variable (off by default)
    "no-undef-init": "error",              // disallow use of undefined when initializing variables
    "no-unused-vars": ["error", {"vars": "all", "args": "none"}], // disallow declaration of variables that are not used in the code
    "no-use-before-define": 0,       // disallow use of variables before they are defined

  // Node.js
  // These rules are specific to JavaScript running on Node.js.

    "handle-callback-err": "error",        // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": "error",          // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": "error",             // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": "error",             // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": 0,            // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": "error",      // restrict usage of specified node modules (off by default)
    "no-sync": 0,                    // disallow use of synchronous methods (off by default)

  // Stylistic Issues
  // These rules are purely matters of style and are quite subjective.

    "key-spacing": ["error", { "beforeColon": false, "afterColon": true, "mode": "strict" }],
    "comma-spacing": 0,
    "no-multi-spaces": "error",
    "brace-style": 0,                // enforce one true brace style (off by default)
    "camelcase": 0,                  // require camel case names
    "consistent-this": "error",            // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": "error",                   // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0,                 // require function expressions to have a name (off by default)
    "func-style": 0,                 // enforces use of function declarations or expressions (off by default)
    "new-cap": 0,                    // require a capital letter for constructors
    "new-parens": "error",                 // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-nested-ternary": 0,          // disallow nested ternary expressions (off by default)
    "no-array-constructor": "error",       // disallow use of the Array constructor
    "no-lonely-if": 0,               // disallow if as the only statement in an else block (off by default)
    "no-multiple-empty-lines": "error",
    "no-new-object": "error",              // disallow use of the Object constructor
    "no-spaced-func": "error",             // disallow space between function identifier and application
    "no-ternary": 0,                 // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": "error",         // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0,       // disallow dangling underscores in identifiers
    "no-mixed-spaces-and-tabs": "error",   // disallow mixed spaces and tabs for indentation
    "quotes": ["error", "single", "avoid-escape"],         // specify whether double or single quotes should be used
    "quote-props": 0,                // require quotes around object literal property names (off by default)
    "semi": "error",                       // require or disallow use of semicolons instead of ASI
    "sort-vars": 0,                  // sort variables within the same declaration block (off by default)
    "keyword-spacing": ["error", { "before": true, "after": true }],       // require a space after certain keywords (off by default)
    "array-bracket-spacing": ["error", "never"],
    "computed-property-spacing": ["error", "never"],
    "space-in-parens": ["error", "never"],
    "space-infix-ops": "error",            // require spaces around operators
    "space-unary-ops": ["error", { "words": true, "nonwords": false }], // require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "max-nested-callbacks": 0,       // specify the maximum depth callbacks can be nested (off by default)
    "one-var": 0,                    // allow just one var statement per function (off by default)
    "wrap-regex": 0,                 // require regex literals to be wrapped in parentheses (off by default),
    "indent": ["error", 2, { "SwitchCase": 1}],

  // Legacy
  // The following rules are included for compatibility with JSHint and JSLint. While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.

    "max-depth": 0,                  // specify the maximum depth that blocks can be nested (off by default)
    "max-len": 0,                    // specify the maximum length of a line in your program (off by default)
    "max-params": 0,                 // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": 0,             // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": "error",                 // disallow use of bitwise operators (off by default)
    "no-plusplus": 0,                // disallow use of unary operators, ++ and -- (off by default)

    "react/display-name": 0,
    "react/jsx-boolean-value": 0,
    "jsx-quotes": ["error", "prefer-double"],
    "react/jsx-sort-props": 0,
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "react/no-did-mount-set-state": [0, "allow-in-func"],
    "react/no-did-update-set-state": [0, "allow-in-func"],
    "react/no-multi-comp": 0,
    "react/no-unknown-property": 0,
    "react/prop-types": 0,
    "react/react-in-jsx-scope": 0,
    "react/self-closing-comp": "error",
    "react/wrap-multilines": 0,
    "react/jsx-no-undef": 2
  }
}